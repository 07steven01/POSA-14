Programming Assignment 1

In this assignment, you will implement a Java program that creates two
instances of the PlayPingPongThread and then starts these thread
instances to correctly alternate printing "Ping" and "Pong",
respectively, on the console display.  In this directory you'll find
the PingPongRight.java class, which contains the skeleton Java code
that you'll implement by completing the "TODO - You fill in here"
comments to provide a working solution.  DO NOT CHANGE THE OVERALL
STRUCTURE OF THE SKELETON - just fill in the "TODO - You fill in here"
portions!!!

In particular, you'll need to do the following:

. Implement the SimpleSemaphore class using a Java ConditionObject and
  Java ReentrantLock, which are covered in these videos:
  
  Section 1: Module 2: Part 5: Java ReentrantLock
  Section 1: Module 2: Part 8: Java ConditionObject 

  There are also relevant discussions about using Java
  ConditionObjects at these links that may help with the
  SimpleSemaphore implementation:

  http://docs.oracle.com/javase/1.5.0/docs/api/java/util/concurrent/locks/Condition.html
  http://stackoverflow.com/questions/11308768/condition-should-unlock-before-await

. Use your SimpleSemaphore to implement the PlayPingPongThread class
  and fix the problems with the earlier PingPongWrong solution, which
  is covered in this video:
  
  Section 1: Module 2: Part 3: Motivating Java Synchronization and Scheduling Mechanisms 

. Implement the PingPongRight class data members (including a Java
  CountDownLatch) and the main() function that uses the
  SimpleSemaphore and CountDownLatch.  The Java CountDownLatch class
  is covered in this video:

  Section 1: Module 2: Part 9: Java CountDownLatch

  There are also relevant discussions about using Java
  CountDownLatches at these links:

  http://javatechig.com/java/countdownlatch-and-java-concurrency-example  
  http://tutorials.jenkov.com/java-util-concurrent/countdownlatch.html

Note, at the moment, all these videos are available in the YouTube
playlist at 

https://www.youtube.com/playlist?list=PLZ9NgFYEMxp4tbiFYip6tDNIEBRUDyPQK
 
When the 2014 POSA MOOC officially starts these videos will be
available at

https://class.coursera.org/posa-002/lecture

We'll also discuss this assignment specification (and later its
solution) in the POSA MOOC "Virtual Office Hours", which are described
in item #38 at the POSA MOOC FAQ available from

http://www.courera.org/course/posa

To compile this code simply type

% javac PingPongRight.java

and to run the resulting class file simply type

% java PingPongRight

The correct solution should look exactly like this:

Ready...Set...Go!
Ping!(1)
Pong!(1)
Ping!(2)
Pong!(2)
Ping!(3)
Pong!(3)
Ping!(4)
Pong!(4)
Ping!(5)
Pong!(5)
Ping!(6)
Pong!(6)
Ping!(7)
Pong!(7)
Ping!(8)
Pong!(8)
Ping!(9)
Pong!(9)
Ping!(10)
Pong!(10)
Done!






